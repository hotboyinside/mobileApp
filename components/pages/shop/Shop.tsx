import { ThemedText } from '@/components/ThemedText';
import { ErrorCode, PurchaseIOS, useIAP } from 'expo-iap';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Alert, Button, View } from 'react-native';
import { postInAppPurchasesRequest } from '@/config/api/inAppPurchases';

const SUB_IDS = ['premium_monthly', 'premium_halfyear', 'premium_yearly'];

export const Shop = () => {
    const [loading, setLoading] = useState(true);
    const {
        connected,
        subscriptions, // ProductSubscription[],
        fetchProducts, // (params) => Promise<void>
        requestPurchase, // (params) => Promise<void>
        finishTransaction, // (params) => Promise<void>
    } = useIAP({
        onPurchaseSuccess: async purchase => {
            try {
                console.log('purchase', purchase);

                const iosPurchase = purchase as PurchaseIOS;

                const payload = {
                    appBundleIdIOS: iosPurchase.appBundleIdIOS,
                    transactionId: iosPurchase.transactionId,
                    originalTransactionIdentifierIOS: iosPurchase.originalTransactionIdentifierIOS,
                    productId: iosPurchase.productId,
                    purchaseToken: iosPurchase.purchaseToken,
                    expirationDateIOS: iosPurchase.expirationDateIOS,
                    transactionDate: iosPurchase.transactionDate,
                    environmentIOS: iosPurchase.environmentIOS,
                    platform: iosPurchase.platform,
                };

                // TODO: –æ—Ç–ø—Ä–∞–≤—å purchase/receipt –Ω–∞ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (recommended)
                const result = await postInAppPurchasesRequest(payload);
                console.log('result', result);

                if (result.status == 200) {
                    // isConsumable = false –¥–ª—è s–ø–æ–¥–ø–∏—Å–æ–∫
                    await finishTransaction({ purchase, isConsumable: false });
                    Alert.alert('–£—Å–ø–µ—Ö', '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ');
                } else {
                    // –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ ‚Äî –º–æ–∂–Ω–æ –Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
                    Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                    return
                }
            } catch (err) {
                console.warn('finishTransaction error', err);
            }
        },
        onPurchaseError: error => {
            const { code, message } = error;

            if (code === ErrorCode.UserCancelled) {
                Alert.alert('–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                return;
            }

            Alert.alert('–û—à–∏–±–∫–∞', message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É');
        },
    });

    useEffect(() => {
        const load = async () => {
            if (!connected) return;

            setLoading(true); // üîπ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É

            try {
                await fetchProducts({ skus: SUB_IDS, type: 'subs' });
            } catch (err) {
                console.warn('fetchProducts error:', err);
            } finally {
                setLoading(false); // üîπ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            }
        };

        load();
    }, [connected]);

    const handleBuy = async (id: string) => {
        try {
            await requestPurchase({
                request: {
                    ios: { sku: id },
                    android: { skus: [id] },
                },
                type: 'subs',
            });
        } catch (err) {
            console.warn('requestPurchase error:', err);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É');
        }
    };

    if (loading) {
        return (
            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
                <ActivityIndicator />
                <ThemedText style={{ marginTop: 8 }}>–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...</ThemedText>
            </View>
        );
    }

    return (
        <View style={{ padding: 16, backgroundColor: '#000' }}>
            <ThemedText style={{ fontSize: 20, fontWeight: '600', marginBottom: 12 }}>
                –ü–æ–¥–ø–∏—Å–∫–∏
            </ThemedText>

            {subscriptions.length === 0 ? (
                <ThemedText>
                    –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ productId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å App Store
                    Connect.
                </ThemedText>
            ) : (
                subscriptions.map(s => (
                    <View
                        key={s.id}
                        style={{
                            marginBottom: 14,
                            padding: 12,
                            borderWidth: 1,
                            borderRadius: 8,
                        }}
                    >
                        <ThemedText style={{ fontWeight: '600' }}>
                            {s.title ?? s.id}
                        </ThemedText>
                        {s.description ? <ThemedText>{s.description}</ThemedText> : null}
                        <ThemedText style={{ marginVertical: 6 }}>
                            {s.price ?? s.displayPrice ?? ''}
                        </ThemedText>
                        <Button title='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' onPress={() => handleBuy(s.id)} />
                    </View>
                ))
            )}
        </View>
    );
};
